import asyncio
import uuid
import mimetypes
import base64
import aiohttp
import pyaudio
import wave
import os

from IPython.display import display

from pywebio import start_server
from pywebio.input import *
from pywebio.output import *
from pywebio.session import defer_call, info as session_info, run_async, run_js

import os
from dotenv import load_dotenv

load_dotenv()

chat_msgs = []
online_users = set()

PASSWORD_INPUT = os.getenv("PASSWORD")

MAX_MESSAGES_COUNT = 3




CSS = '''
<style>
    *{
        
    }
  .webio-theme-default {
        
        opacity: 0.9;
        background-repeat: no-repeat;
        background-size: cover;
        background-position: center;
        }
    #input-container{
            z-index: 0;
            background: none;
            position: static;
            height: fit-content;
            box-shadow: none;
            margin-top: 0;
            margin-bottom: 40px;
    }
    .markdown-body{
        background-color: white;
        z-index: 100;
    }
</style>
'''

counter = 0

async def record_audio():
    global counter
    # audio
    chunk = 1024  # –ó–∞–ø–∏—Å—å –∫—É—Å–∫–∞–º–∏ –ø–æ 1024 —Å—ç–º–ø–ª–∞
    sample_format = pyaudio.paInt16  # 16 –±–∏—Ç –Ω–∞ –≤—ã–±–æ—Ä–∫—É
    channels = 2
    rate = 44100  # –ó–∞–ø–∏—Å—å —Å–æ —Å–∫–æ—Ä–æ—Å—Ç—å—é 44100 –≤—ã–±–æ—Ä–æ–∫(samples) –≤ —Å–µ–∫—É–Ω–¥—É
    seconds = 3

    counter += 1

    filename = f"./static/audio_records/output_sound_{counter}.wav" # –°–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª 'output_sound + {nickname} + {counter}'.mp3
    p = pyaudio.PyAudio()  # –°–æ–∑–¥–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è PortAudio
    print('Recording...')
    stream = p.open(format=sample_format,
                    channels=channels,
                    rate=rate,
                    frames_per_buffer=chunk,
                    input_device_index=1,  # –∏–Ω–¥–µ–∫—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥–µ—Ç –∏–¥—Ç–∏ –∑–∞–ø–∏—Å—å –∑–≤—É–∫–∞
                    input=True)
    
    frames = []  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞–¥—Ä–æ–≤
    

    

    # –•—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –±–ª–æ–∫–∞—Ö –≤ —Ç–µ—á–µ–Ω–∏–µ 3 —Å–µ–∫—É–Ω–¥
    for i in range(0, int(rate / chunk * seconds)):
        data = stream.read(chunk)
        frames.append(data)
    
    # –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏ –∑–∞–∫—Ä—ã—Ç—å –ø–æ—Ç–æ–∫
    stream.stop_stream()
    stream.close()
    # –ó–∞–≤–µ—Ä—à–∏—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å PortAudio
    p.terminate()
    
    print('Finished recording!')

    # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–ø–∏—Å–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –≤–∏–¥–µ —Ñ–∞–π–ª–∞ WAV
    wf = wave.open(filename, 'wb')
    wf.setnchannels(channels)
    wf.setsampwidth(p.get_sample_size(sample_format))
    wf.setframerate(rate)
    wf.writeframes(b''.join(frames))
    wf.close()
    
    audio = put_html('''
        <audio src="{}" controls>
            Your browser does not support the audio element.
        </audio>
    '''.format(filename))
    
    return audio


async def main():
    global chat_msgs

    put_html(CSS)  # –¥–æ–±–∞–≤–∏—Ç—å CSS —Å—Ç–∏–ª—å

    put_markdown("## ‚≠ê –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä –í–æ–µ–Ω–Ω–æ–π –∞–∫–∞–¥–µ–º–∏–∏ —Å–≤—è–∑–∏!")

    msg_box = output()
    put_scrollable(msg_box, height=300, keep_bottom=True)

    nickname = await input("–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω", required=True, placeholder="–í–∞—à –ª–æ–≥–∏–Ω", validate=lambda n: "–¢–∞–∫–æ–π –ª–æ–≥–∏–Ω —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è!" if n in online_users or n == 'üì¢' else None)
    online_users.add(nickname)
    password = await input("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å", required=True, placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å", type=PASSWORD)
    if password == PASSWORD_INPUT:
        chat_msgs.append(('‚úîÔ∏è', 'message', f'`{nickname}` –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —á–∞—Ç—É!'))
        msg_box.append(put_markdown(f'‚úîÔ∏è `{nickname}` –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —á–∞—Ç—É'))

        refresh_task = run_async(refresh_msg(nickname, msg_box))

        while True:
            data = await input_group("üí≠ –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", [
                input(placeholder="–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è ...", name="msg"),
                file_upload('–í—ã–±–µ—Ä–µ—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...',
                            accept="image/*", multiple=True, name='img'),
                actions(name="cmd", buttons=["–û—Ç–ø—Ä–∞–≤–∏—Ç—å", "–ó–∞–ø–∏—Å–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", {
                        'label': "–í—ã–π—Ç–∏ –∏–∑ —á–∞—Ç–∞", 'type': 'cancel'}])
            ], validate=lambda m: ('msg', "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è!") if m["cmd"] == "–û—Ç–ø—Ä–∞–≤–∏—Ç—å" and not m['msg'] and not m['img'] else None)

            if data is None:
                break

            if data['img']:
                up_img = data['img']
                for file in up_img:
                    if file['content']:
                        file_type = mimetypes.guess_type(file['filename'])[0]
                        img_content = base64.b64encode(
                            file['content']).decode('utf-8')
                        msg_box.append(put_markdown(f"`{nickname}`:"))
                        msg_box.append(
                            put_image(src='data:'+file_type+';base64,'+img_content, width='170px'))
                        chat_msgs.append(
                            (nickname, 'image', file['filename'], img_content, file_type))

            if data['msg']:
                msg_box.append(put_markdown(f"`{nickname}`: {data['msg']}"))
                chat_msgs.append((nickname, 'message', data['msg']))

            if data['cmd'] == '–ó–∞–ø–∏—Å–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ':
                audio_content = await record_audio()
                msg_box.append(put_markdown(f"`{nickname}`:"))
                msg_box.append(audio_content)
                chat_msgs.append((nickname, 'audio', audio_content))

        refresh_task.close()

        online_users.remove(nickname)
        toast("–í—ã –≤—ã—à–ª–∏ –∏–∑ —á–∞—Ç–∞!")
        msg_box.append(put_markdown(
            f'‚ùó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å `{nickname}` –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç!'))
        chat_msgs.append(('‚ùó', 'message', f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å `{nickname}` –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç!'))

        put_buttons(['–ü–µ—Ä–µ–∑–∞–π—Ç–∏'], onclick=lambda btn: run_js(
            'window.location.reload()'))
    else:
        msg_box.append(put_markdown('‚ùó –ü–∞—Ä–æ–ª—å –Ω–µ –≤–µ—Ä–Ω—ã–π!'))

        refresh_task = run_async(refresh_msg('Ooops!', msg_box))


async def refresh_msg(nickname, msg_box):
    global chat_msgs
    last_idx = len(chat_msgs)
    
    while True:
        await asyncio.sleep(1)
        print(len(chat_msgs[last_idx:]))
        for m in chat_msgs[last_idx:]:
            if m[0] != nickname:  # if not a message from current user
                if m[1] == 'image':
                    msg_box.append(put_markdown(f"`{m[0]}`:"))
                    msg_box.append(
                        put_image(src='data:'+m[2]+';base64,'+m[3], width='170px'))
                elif m[1] == 'audio':
                    msg_box.append(put_markdown(f"`{m[0]}`:"))
                    msg_box.append(m[2])
                
                elif m[1] == 'message':
                    msg_box.append(put_markdown(f"`{m[0]}`: {m[2]}"))

                # print(len(chat_msgs))
        
        # remove expired messages and files
        if len(chat_msgs) > MAX_MESSAGES_COUNT:
            half_len = len(chat_msgs)//2
            
            # remove files in ./static/audio_records folder
            folder = './static/audio_records'
            files = os.listdir(folder)    
            for file_name in files[:1]:
                file_path = os.path.join(folder, file_name)
                os.remove(file_path)
            
            # remove expired messages
            chat_msgs = chat_msgs[half_len:]
            last_idx = len(chat_msgs)
                

if __name__ == "__main__":
    start_server(main, debug=True, port=8080, cdn=True,
                 static_dir='./static', host="127.0.0.1")